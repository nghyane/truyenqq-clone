const encrypt = async (e, t) => {
  const o = new TextEncoder(),
    n = await crypto.subtle.importKey("raw", o.encode(t), "AES-GCM", !0, [
      "encrypt",
    ]),
    a = crypto.getRandomValues(new Uint8Array(12)),
    r = o.encode(e),
    i = await crypto.subtle.encrypt({ name: "AES-GCM", iv: a }, n, r);
  return btoa(
    JSON.stringify({
      iv: btoa(String.fromCharCode.apply(null, a)),
      encryptedData: btoa(String.fromCharCode.apply(null, new Uint8Array(i))),
    }),
  );
};
(window.App = (() => {
  const e = ["location", "hostname"],
    t = async () => {
      null === localStorage.getItem(window.VARIABLES.UUID_HASH) &&
        localStorage.setItem(
          window.VARIABLES.UUID_HASH,
          window.crypto.randomUUID(),
        );
      const t = await encrypt(
        JSON.stringify({
          time: Date.now(),
          platform: window.navigator.platform,
          screen: `${window.screen.width}x${window.screen.height}`,
          uuidHash: localStorage.getItem(window.VARIABLES.UUID_HASH),
        }),
        e.join(""),
      );
      return (
        sessionStorage.setItem(window.VARIABLES.VISITOR_TOKEN, t.toString()),
        t.toString()
      );
    },
    o = async () => {
      const e = document.querySelector(".carousel-viewport"),
        t = (
          await import(
            "https://cdn.jsdelivr.net/npm/embla-carousel@8.0.0-rc19/+esm"
          )
        ).default(e, {
          loop: !0,
          slidesToScroll: "auto",
          containScroll: "trimSnaps",
          align: "start",
        }),
        o = document.querySelector(".carousel-button--prev"),
        n = document.querySelector(".carousel-button--next");
      o.addEventListener("click", t.scrollPrev, !1),
        n.addEventListener("click", t.scrollNext, !1);
    },
    n = async () => {
      const e = await import(
        "https://cdn.jsdelivr.net/npm/vanilla-lazyload@17.8.5/+esm"
      );
      (window.lazyLoadOptions = { threshold: 0 }),
        window.addEventListener(
          "LazyLoad::Initialized",
          function (e) {
            window.lazyLoadInstance = e.detail.instance;
          },
          !1,
        ),
        new e.default({
          elements_selector: ".lazy",
          callback_enter: function (e) {
            e.classList.remove("opacity-0");
          },
        });
    },
    a = async () => {
      const e = document.querySelector(".header-input"),
        t = document.querySelector(".search-results");
      e.addEventListener("keyup", async (o) => {
        const n = await fetch(`/search-ajax?keyword=${o.target.value}`, {
          headers: { "Content-Type": "application/json" },
        });
        (t.style.display = "block"),
          document.addEventListener("click", (o) => {
            t.contains(o.target) || e.contains(o.target)
              ? (t.style.display = "block")
              : (t.style.display = "none");
          }),
          (t.innerHTML = await n.text());
      });
    },
    r = async () => {
      const e = window?.__INITIAL_STATE__?.mangaId,
        o = sessionStorage.getItem(window.VARIABLES.CACHE_ID) || "",
        n = window.location.pathname.includes("/manga") ? "manga" : "chapter";
      e &&
        localStorage.getItem(window.VARIABLES.UUID_HASH) &&
        fetch(`/api/v1/user/bookmark?template=${n}&id=${e}&cacheId=${o}`, {
          method: "GET",
          headers: { token: await t() },
        })
          .then((e) => e.text())
          .then((e) => {
            document.querySelector("#bookmark").outerHTML = e;
          });
    };
  return {
    Initialized: async () => {
      const e = document.querySelector("#search-chapter"),
        t = document.querySelector("#load-more-chapters"),
        i = document.querySelectorAll(".lazy"),
        c = document.querySelector(".carousel-viewport"),
        s = document.querySelector(".header-input");
      if (e) {
        const t = document.querySelectorAll("#chapter-list li");
        e.addEventListener("keyup", (e) => {
          t.forEach((t) => {
            const o = t.querySelector("a").innerText.toLowerCase();
            t.classList.toggle(
              "hidden",
              !o.includes(e.target.value.toLowerCase()),
            );
          });
        });
      }
      t &&
        t.addEventListener("click", (e) => {
          e.preventDefault();
          document
            .querySelectorAll("#chapter-list li.hidden")
            .forEach((e) => e.classList.remove("hidden")),
            t.remove();
        }),
        i.length > 0 && n(),
        c && setTimeout(o, 1e3),
        s && a();
      const l = document.querySelector("#back-to-top-button");
      window.addEventListener("scroll", (e) => {
        window.scrollY > 100
          ? l.classList.remove("opacity-0")
          : l.classList.add("opacity-0");
      }),
        l?.addEventListener("click", (e) => {
          e.preventDefault(), window.scrollTo({ top: 0, behavior: "auto" });
        }),
        setTimeout(() => {
          r();
        }, 500);
    },
    ReadingInit: async () => {
      setTimeout(() => {
        (() => {
          const e = localStorage.getItem(window.VARIABLES.HISTORIES)
              ? JSON.parse(localStorage.getItem(window.VARIABLES.HISTORIES))
              : [],
            t = window.__INITIAL_STATE__?.mangaId;
          if (!t) return;
          const o = e.findIndex((e) => e.mangaId === t);
          -1 !== o && e.splice(o, 1),
            e.unshift(window.__INITIAL_STATE__),
            e.length > 100 && e.pop(),
            localStorage.setItem(window.VARIABLES.HISTORIES, JSON.stringify(e));
        })();
      }, 1e3),
        document.querySelector("nav").classList.remove("lg:sticky");
      const e = document.querySelector("#chapter-nav"),
        t = document.querySelector("#nav-placeholder"),
        o = document.querySelectorAll(".next-chapter"),
        n = document.querySelectorAll(".prev-chapter"),
        a = e.offsetTop;
      let r = window.scrollY;
      const i = document.querySelector("#chapters"),
        c = (e) => {
          const t = i.querySelector(`option[value="${e.target.value}"]`);
          t && (window.location.href = `/read?id=${t.value}`);
        };
      o?.forEach((e) => {
        e.addEventListener("click", (e) => {
          e.preventDefault();
          const t = i.querySelector(
            `option[value="${window.__INITIAL_STATE__.chapterId}"]`,
          ).previousElementSibling;
          t ? c({ target: { value: t.value } }) : alert("No more chapter");
        });
      }),
        n?.forEach((e) => {
          e.addEventListener("click", (e) => {
            e.preventDefault();
            const t = i.querySelector(
              `option[value="${window.__INITIAL_STATE__.chapterId}"]`,
            ).nextElementSibling;
            t && c({ target: { value: t.value } });
          });
        }),
        fetch(`/api/v1/chapters?id=${window.__INITIAL_STATE__.mangaId}`)
          .then((e) => e.text())
          .then((e) => {
            (e = e.replace(
              `value="${window.__INITIAL_STATE__.chapterId}"`,
              `value="${window.__INITIAL_STATE__.chapterId}" selected`,
            )),
              (i.innerHTML = e);
          }),
        i.addEventListener("change", (e) => {
          e.target.value !== window.__INITIAL_STATE__.chapterId &&
            (window.location.href = `/read?id=${e.target.value}`);
        }),
        window.addEventListener("scroll", (o) => {
          (window.innerWidth >= 768 && window.scrollY >= a) ||
          (window.innerWidth < 768 && window.scrollY >= a + e.offsetHeight)
            ? (t.classList.remove("hidden"),
              (e.style =
                "position: fixed; top: 0; left: 0; right: 0; z-index: 9999;"),
              window.innerWidth < 768 &&
                (window.scrollY > r
                  ? (e.style.opacity = "0")
                  : (e.style.opacity = "1")))
            : (t.classList.add("hidden"), (e.style = "")),
            (r = window.scrollY);
        });
      const s = await import(
        "https://cdn.jsdelivr.net/npm/@fingerprintjs/botd@1.9.0/+esm"
      )
        .then((e) => e.load())
        .catch((e) => {
          document.querySelector("#viewer").innerHTML =
            '<div class="text-center p-5"><h1 class="text-2xl">Please disable your adblocker and refresh the page.</h1></div>';
        });
      if (!1 !== (await s.detect()).bot)
        return void alert(
          "Please disable your adblocker and refresh the page.",
        );
      const l = new IntersectionObserver(
        async function (e, t) {
          const o = e.map(async (e) => {
            if (e.isIntersecting) {
              const o = e.target,
                n = o.getAttribute("data-src"),
                a = await (async function (e) {
                  const t = new Image();
                  return (
                    (e = e.replace(
                      "storage.dnmanga.one",
                      "i0.wp.com/storage.dnmanga.one/mgraw",
                    )),
                    (t.crossOrigin = "Anonymous"),
                    (t.src = e),
                    new Promise((e, o) => {
                      (t.onload = () => e(t)), (t.onerror = o);
                    })
                  );
                })(n);
              return (
                t.unobserve(o),
                a.classList.add("w-full", "h-full"),
                void (o.innerHTML = a.outerHTML)
              );
            }
          });
          await Promise.all(o);
        },
        { root: null, rootMargin: "800px", threshold: 0 },
      );
      document.querySelector("#viewer").addEventListener("contextmenu", (e) => {
        e.preventDefault();
      });
      document.querySelectorAll("#viewer .page-img").forEach((e) => {
        l.observe(e);
      });
    },
    Carousel: o,
    addToBookmark: async (e, o) => {
      sessionStorage.setItem(
        window.VARIABLES.CACHE_ID,
        btoa(Date.now() + localStorage.getItem(window.VARIABLES.UUID_HASH)),
      );
      const n = window.location.pathname.includes("/manga")
        ? "manga"
        : "chapter";
      fetch("/api/v1/user/bookmark", {
        headers: { token: await t() },
        body: JSON.stringify({ template: n, id: o }),
        method: "POST",
      })
        .then((e) => e.text())
        .then((t) => {
          e.outerHTML = t;
        });
    },
    removeFromBookmark: async (e, o) => {
      sessionStorage.setItem(
        window.VARIABLES.CACHE_ID,
        btoa(Date.now() + localStorage.getItem(window.VARIABLES.UUID_HASH)),
      );
      const n = window.location.pathname.includes("/manga")
        ? "manga"
        : "chapter";
      fetch("/api/v1/user/bookmark", {
        headers: { token: await t() },
        body: JSON.stringify({ template: n, id: o }),
        method: "DELETE",
      })
        .then((e) => e.text())
        .then((t) => {
          e.outerHTML = t;
        });
    },
    toggleSearch: () => {
      const e = document.querySelector("#search-form");
      e.classList.toggle("flex"), e.classList.toggle("hidden");
    },
    toggleMenu: () => {
      document.querySelectorAll(".menu-hidden").forEach((e) => {
        e.classList.toggle("!block");
        const t = e.querySelector(".hidden-menu");
        t &&
          e.firstElementChild.addEventListener("click", (e) => {
            e.preventDefault(), t.classList.toggle("!block");
          });
      });
    },
    showToaster: (e) => {
      const t = document.querySelector("#toast");
      t.classList.contains("hidden") &&
        ((t.querySelector("#toast-message").innerHTML = e),
        t.classList.remove("opacity-0"),
        t.classList.remove("hidden"),
        setTimeout(() => {
          t.classList.add("hidden");
        }, 4e3),
        setTimeout(() => {
          t.classList.add("opacity-0");
        }, 2900));
    },
    getVisitorToken: t,
    LazyLoad: n,
  };
})()),
  window.addEventListener("DOMContentLoaded", () => {
    window.App.Initialized(),
      window.location.pathname.includes("/read") && window.App.ReadingInit();
  });
