generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Manga {
  id          Int          @id @default(autoincrement())
  title       String
  alternative String?      @db.Text
  description String
  isAdult     Boolean      @default(false) @map("is_adult")
  isNoindex   Boolean      @default(false) @map("is_noindex")
  status      Int          @default(1) @db.SmallInt
  image       String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @map("updated_at")
  chapters    Chapter[]
  bookmarks   Bookmark[]
  genres      Genre[]
  tags        Tag[]
  views       MangaView?

  @@index([title], name: "title")
  @@map("mangas")
}

model Chapter {
  id        Int      @id @default(autoincrement())
  title     String
  index     Int      @default(0)
  mangaId   Int
  content   Json?  
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @default(now()) @map("updated_at")

  manga Manga @relation(fields: [mangaId], references: [id])



  @@index([mangaId], name: "mangaId")
  @@map("chapters")
}

model MangaView {
  id        Int @id @default(autoincrement())
  views     Int @default(0)
  viewsDay  Int @default(0)
  viewsWeek Int @default(0)
  mangaId   Int @unique @map("manga_id")
  manga   Manga @relation(fields: [mangaId], references: [id])

  @@map("manga_views")
} 

model Genre {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  pinned    Boolean      @default(false)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @default(now()) @map("updated_at")
  manga     Manga[]

  @@map("genres")
}



model Tag {
  id        Int          @id @default(autoincrement())
  name      String       @unique

  manga    Manga[]

  @@map("tags")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String?  @unique
  fullname  String
  password  String
  usename   String
  role      String   @default("user")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @default(now()) @map("updated_at")
  Session   Session?

  @@map("users")
}

model Session {
  id        Int      @id @default(autoincrement())
  uuidHash  String   @unique
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @default(now()) @map("updated_at")

  bookmarks Bookmark[]

  @@map("sessions")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  mangaId   Int
  sessionId Int

  manga   Manga   @relation(fields: [mangaId], references: [id])
  session Session @relation(fields: [sessionId], references: [id])

  @@index([sessionId], name: "sessionId")
  @@map("bookmarks")
}
