generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Manga {
  id          Int        @id @default(autoincrement())
  title       String
  alternative String?
  description String
  status      Int        @default(1) @db.SmallInt
  image       String
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")
  isAdult     Boolean    @default(false) @map("is_adult")
  isNoindex   Boolean    @default(false) @map("is_noindex")
  isPublic    Boolean    @default(false) @map("is_public")
  bookmarks   Bookmark[]
  chapters    Chapter[]
  views       MangaView?
  genres      Genre[]    @relation("GenreToManga")
  tags        Tag[]      @relation("MangaToTag")

  @@index([title], map: "title")
  @@map("mangas")
}

model Chapter {
  id        Int      @id @default(autoincrement())
  title     String
  mangaId   Int
  content   Json     @map("content")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  index     Float    @default(0)
  isPublic  Boolean  @default(false) @map("is_public")
  manga     Manga    @relation(fields: [mangaId], references: [id], onDelete: Cascade)

  @@index([mangaId], map: "mangaId")
  @@map("chapters")
}

model MangaView {
  id         Int   @id @default(autoincrement())
  views      Int   @default(0)
  viewsDay   Int   @default(0)
  viewsWeek  Int   @default(0)
  mangaId    Int   @unique @map("manga_id")
  viewsMonth Int   @default(0)
  manga      Manga @relation(fields: [mangaId], references: [id], onDelete: Cascade)

  @@map("manga_views")
}

model Genre {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  pinned    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  content   String?
  manga     Manga[]  @relation("GenreToManga")

  @@map("genres")
}

model Tag {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  content String?
  manga   Manga[] @relation("MangaToTag")

  @@map("tags")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String?  @unique
  fullname  String
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  username  String   @unique
  Session   Session?

  @@map("users")
}

model Session {
  id        Int        @id @default(autoincrement())
  uuidHash  String     @unique
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")
  userId    Int?       @unique @map("user_id")
  bookmarks Bookmark[]
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "userId")
  @@map("sessions")
}

model Bookmark {
  id        Int     @id @default(autoincrement())
  mangaId   Int
  sessionId Int
  manga     Manga   @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, mangaId], name: "sessionId_mangaId_unique")
  @@map("bookmarks")
}
